// üìÑ migrate-odds-update.js - SCRIPT DE MIGRACI√ìN COMPLETA
// ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

require('dotenv').config();
const { syncDatabase } = require('./src/models');
const { updateBettingMarkets } = require('./updateBettingMarkets');

async function migrateOddsUpdate() {
  try {
    console.log('üöÄ INICIANDO MIGRACI√ìN COMPLETA DE ODDS SYSTEM');
    console.log('‚ïê'.repeat(60));
    
    // 1. Sincronizar modelos (crear nuevas columnas en BettingMarket)
    console.log('üìä 1. Sincronizando modelos de base de datos...');
    await syncDatabase();
    console.log('   ‚úÖ Modelos sincronizados exitosamente');
    
    // 2. Actualizar/crear mercados de apuestas
    console.log('\nüìã 2. Actualizando mercados de apuestas...');
    await updateBettingMarkets();
    
    // 3. Verificar que todo est√© correcto
    console.log('\nüîç 3. Verificando instalaci√≥n...');
    const { BettingMarket } = require('./src/models');
    
    const totalMarkets = await BettingMarket.count();
    const categoriesCount = await BettingMarket.count({
      distinct: true,
      col: 'category'
    });
    
    console.log(`   üìä Total mercados: ${totalMarkets}`);
    console.log(`   üìÇ Categor√≠as: ${categoriesCount}`);
    
    // 4. Mostrar mercados por categor√≠a
    const marketsByCategory = await BettingMarket.findAll({
      attributes: [
        'category',
        [BettingMarket.sequelize.fn('COUNT', BettingMarket.sequelize.col('id')), 'count']
      ],
      group: ['category'],
      order: [['category', 'ASC']]
    });

    console.log('\nüìà DISTRIBUCI√ìN DE MERCADOS:');
    marketsByCategory.forEach(item => {
      console.log(`   ${item.category}: ${item.dataValues.count} mercados`);
    });
    
    console.log('\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!');
    console.log('‚ïê'.repeat(60));
    console.log('‚úÖ Base de datos actualizada');
    console.log('‚úÖ Nuevos mercados creados/actualizados');
    console.log('‚úÖ Sistema de odds expandido');
    
    console.log('\nüî• PR√ìXIMOS PASOS:');
    console.log('1. Reiniciar servidor: npm run dev');
    console.log('2. Sincronizar odds: POST /api/odds/sync');
    console.log('3. Probar endpoints: GET /api/odds/markets');
    
    console.log('\nüéØ NUEVAS FUNCIONALIDADES:');
    console.log('‚Ä¢ 40+ mercados de apuestas');
    console.log('‚Ä¢ Corners, Cards, Exact Score');
    console.log('‚Ä¢ Primer tiempo y segundo tiempo');
    console.log('‚Ä¢ Mercados especiales y combinados');
    console.log('‚Ä¢ Sistema de prioridades mejorado');
    
    process.exit(0);
    
  } catch (error) {
    console.error('\nüí• ERROR EN MIGRACI√ìN:', error);
    console.error('\nüîß POSIBLES SOLUCIONES:');
    console.error('1. Verificar conexi√≥n a base de datos');
    console.error('2. Verificar permisos de escritura');
    console.error('3. Revisar variables de entorno');
    console.error('4. Ejecutar: npm run db:setup');
    
    process.exit(1);
  }
}

// Funci√≥n de rollback por si algo sale mal
async function rollbackMigration() {
  try {
    console.log('üîÑ EJECUTANDO ROLLBACK...');
    
    const { BettingMarket } = require('./src/models');
    
    // Mantener solo los mercados b√°sicos originales
    const basicMarkets = ['1X2', 'OVER_UNDER_2_5', 'BTTS', 'DOUBLE_CHANCE', 'OVER_UNDER_1_5', 'OVER_UNDER_3_5', 'HT_1X2'];
    
    const deletedCount = await BettingMarket.destroy({
      where: {
        key: {
          [require('sequelize').Op.notIn]: basicMarkets
        }
      }
    });
    
    console.log(`‚úÖ Rollback completado: ${deletedCount} mercados eliminados`);
    console.log(`‚úÖ Mantenidos mercados b√°sicos: ${basicMarkets.length}`);
    
  } catch (error) {
    console.error('‚ùå Error en rollback:', error);
  }
}

// Ejecutar funci√≥n seg√∫n par√°metro
const action = process.argv[2];

if (action === 'rollback') {
  rollbackMigration();
} else {
  migrateOddsUpdate();
}